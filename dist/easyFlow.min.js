(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 11);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var DISPLAY = {
  BLOCK: 'block',
  INLINE_BLOCK: 'inline-block',
  INLINE: 'inline',
  // 用户不能设置inline，text默认为inline
  FLEX: 'flex',
  NONE: 'none'
};
var WIDTH = {
  AUTO: 'auto',
  OUTER: '100%'
};
var POSITION = {
  ABSOLUTE: 'absolute',
  FIXED: 'fixed',
  RELATIVE: 'relative',
  STATIC: 'static'
};
var TEXT_ALIGN = {
  LEFT: 'left',
  RIGHT: 'right',
  CENTER: 'center'
};
var FLEX_DIRECTION = {
  ROW: 'row',
  COLUMN: 'column'
};
var DEFAULT_STYLES = {
  display: DISPLAY.BLOCK,
  fontSize: 14,
  fontWeight: 400,
  fontFamily: "Microsoft Yahei",
  color: '#000',
  paddingTop: 0,
  paddingBottom: 0,
  paddingLeft: 0,
  paddingRight: 0,
  marginTop: 0,
  marginBottom: 0,
  marginLeft: 0,
  marginRight: 0,
  height: WIDTH.AUTO,
  borderRadius: 0,
  lineCap: 'square',
  flexDirection: FLEX_DIRECTION.ROW,
  verticalAlign: 'top',
  whiteSpace: 'normal',
  zIndex: 1
};
/* harmony default export */ __webpack_exports__["a"] = ({
  DISPLAY: DISPLAY,
  WIDTH: WIDTH,
  POSITION: POSITION,
  DEFAULT_STYLES: DEFAULT_STYLES,
  TEXT_ALIGN: TEXT_ALIGN,
  FLEX_DIRECTION: FLEX_DIRECTION
});

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isExact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isAuto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isOuter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return parseOuter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return walk; });
/* unused harmony export easeInOutElastic */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isWX; });
function isExact(num) {
  return typeof num === 'number';
}
function isAuto(num) {
  return num === 'auto';
}
function isOuter(num) {
  if (typeof num !== 'string') return;
  return num.match('%');
}
function parseOuter(num) {
  return parseInt(num.replace('%', '')) / 100;
}
function walk(element, callback) {
  callback(element);

  if (element.hasChildren()) {
    element._getChildren().forEach(function (child) {
      walk(child, callback);
    });
  }
} //

var pow = Math.pow,
    sqrt = Math.sqrt,
    sin = Math.sin,
    cos = Math.cos,
    PI = Math.PI,
    c1 = 1.70158,
    c2 = c1 * 1.525,
    c3 = c1 + 1,
    c4 = 2 * PI / 3,
    c5 = 2 * PI / 4.5;
function easeInOutElastic(x) {
  return x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(pow(2, 20 * x - 10) * sin((20 * x - 11.125) * c5)) / 2 : pow(2, -20 * x + 10) * sin((20 * x - 11.125) * c5) / 2 + 1;
}

function easeInOutExpo(pos) {
  if (pos === 0) return 0;
  if (pos === 1) return 1;
  if ((pos /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (pos - 1));
  return 0.5 * (-Math.pow(2, -10 * --pos) + 2);
}

function isWX() {
  return !window;
}

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return View; });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var View = /*#__PURE__*/function (_Element) {
  _inherits(View, _Element);

  var _super = _createSuper(View);

  function View() {
    _classCallCheck(this, View);

    return _super.apply(this, arguments);
  }

  _createClass(View, [{
    key: "_getDefaultStyles",
    value: function _getDefaultStyles() {
      return _objectSpread(_objectSpread({}, _constants__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].DEFAULT_STYLES), {}, {
        display: _constants__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].DISPLAY.BLOCK
      });
    }
  }, {
    key: "_completeStyles",
    value: function _completeStyles() {
      _get(_getPrototypeOf(View.prototype), "_completeStyles", this).call(this);

      this._completePaddingMargin();
    }
  }, {
    key: "_completePaddingMargin",
    value: function _completePaddingMargin() {
      if (this.styles.padding) {
        this.styles.paddingLeft = this.styles.padding;
        this.styles.paddingBottom = this.styles.padding;
        this.styles.paddingRight = this.styles.padding;
        this.styles.paddingTop = this.styles.padding;
      }

      if (this.styles.margin) {
        this.styles.marginLeft = this.styles.margin;
        this.styles.marginBottom = this.styles.margin;
        this.styles.marginRight = this.styles.margin;
        this.styles.marginTop = this.styles.margin;
      }
    }
  }, {
    key: "_reflow",
    value: function _reflow() {
      _get(_getPrototypeOf(View.prototype), "_reflow", this).call(this);
    }
  }, {
    key: "_repaint",
    value: function _repaint() {
      _get(_getPrototypeOf(View.prototype), "_repaint", this).call(this);
    }
  }, {
    key: "_afterPaint",
    value: function _afterPaint() {
      _get(_getPrototypeOf(View.prototype), "_afterPaint", this).call(this);
    }
  }, {
    key: "_drawBackground",
    value: function _drawBackground() {
      var _this$renderStyles = this.renderStyles,
          backgroundColor = _this$renderStyles.backgroundColor,
          contentWidth = _this$renderStyles.contentWidth,
          contentHeight = _this$renderStyles.contentHeight,
          paddingLeft = _this$renderStyles.paddingLeft,
          paddingRight = _this$renderStyles.paddingRight,
          paddingTop = _this$renderStyles.paddingTop,
          paddingBottom = _this$renderStyles.paddingBottom;
      var ctx = this.getCtx();

      this._clip(); // draw background


      if (backgroundColor) {
        this.getCtx().fillStyle = backgroundColor;
        this.getCtx().fillRect(this.contentX - paddingLeft, this.contentY - paddingTop, contentWidth + paddingLeft + paddingRight, contentHeight + paddingTop + paddingBottom);
      }
    }
  }, {
    key: "_drawBox",
    value: function _drawBox() {
      this._drawRadiusBorder(); // for debug


      if (this.getLayer().options && this.getLayer().options.debug) {
        this.getCtx().strokeStyle = 'green';
        this.getCtx().strokeRect(this.contentX, this.contentY, this.renderStyles.contentWidth, this.renderStyles.contentHeight); // ctx.strokeStyle = '#fff'
        // ctx.strokeText(`${parseInt(this.contentX)} ${parseInt(this.contentY)} ${contentWidth} ${contentHeight}`, this.contentX + 100, this.contentY + 10)
        //
      }
    }
  }, {
    key: "_drawRadiusBorder",
    value: function _drawRadiusBorder() {
      var _this = this;

      if (!(this.renderStyles.borderColor || this.renderStyles.shadowBlur)) return;
      var _this$renderStyles2 = this.renderStyles,
          contentWidth = _this$renderStyles2.contentWidth,
          contentHeight = _this$renderStyles2.contentHeight,
          paddingLeft = _this$renderStyles2.paddingLeft,
          paddingTop = _this$renderStyles2.paddingTop,
          paddingRight = _this$renderStyles2.paddingRight,
          paddingBottom = _this$renderStyles2.paddingBottom,
          shadowBlur = _this$renderStyles2.shadowBlur,
          shadowColor = _this$renderStyles2.shadowColor,
          backgroundColor = _this$renderStyles2.backgroundColor,
          borderLeftWidth = _this$renderStyles2.borderLeftWidth,
          borderRightWidth = _this$renderStyles2.borderRightWidth,
          borderTopWidth = _this$renderStyles2.borderTopWidth,
          borderBottomWidth = _this$renderStyles2.borderBottomWidth;
      var angle = Math.PI / 2;

      var borderRadius = this._getBorderRadius(); // 这里是计算画border的位置，起点位置是在线条中间，所以要考虑线条宽度


      var x = this.contentX - this.renderStyles.paddingLeft - borderLeftWidth / 2;
      var y = this.contentY - this.renderStyles.paddingTop - borderTopWidth / 2;
      var w = contentWidth + paddingLeft + paddingRight + (borderLeftWidth + borderRightWidth) / 2;
      var h = contentHeight + paddingTop + paddingBottom + (borderTopWidth + borderBottomWidth) / 2;

      var topBorder = function topBorder() {
        // 左上角开始
        _this.getCtx().moveTo(x, y + borderRadius);

        borderRadius && _this.getCtx().arc(x + borderRadius, y + borderRadius, borderRadius, 2 * angle, 3 * angle);

        _this.getCtx().lineTo(x + w - borderRadius, y);
      };

      var rightBorder = function rightBorder() {
        // 右上角
        // this.getCtx().moveTo(x + w - borderRadius, y)
        borderRadius && _this.getCtx().arc(x + w - borderRadius, y + borderRadius, borderRadius, 3 * angle, 4 * angle);

        _this.getCtx().lineTo(x + w, y + h - borderRadius);
      };

      var bottomBorder = function bottomBorder() {
        // 右下角
        // this.getCtx().moveTo(x + w, y + h - borderRadius)
        borderRadius && _this.getCtx().arc(x + w - borderRadius, y + h - borderRadius, borderRadius, 0, angle);

        _this.getCtx().lineTo(x + borderRadius, y + h);
      };

      var leftBorder = function leftBorder() {
        // 左下角
        borderRadius && _this.getCtx().arc(x + borderRadius, y + h - borderRadius, borderRadius, angle, angle * 2);

        _this.getCtx().lineTo(x, y + borderRadius);
      };

      this.getCtx().lineCap = this.renderStyles.lineCap;
      this.getCtx().strokeStyle = this.renderStyles.borderColor;

      var stroke = function stroke(borderWidth) {
        // 有样式则绘制出来
        _this.getCtx().lineWidth = borderWidth;

        _this.getCtx().stroke();
      }; // 绘制boxshadow


      if (shadowColor && shadowBlur) {
        this._restore(function () {
          _this._path(function () {
            topBorder();
            rightBorder();
            bottomBorder();
            leftBorder();
          });

          _this.getCtx().shadowBlur = shadowBlur;
          _this.getCtx().shadowColor = shadowColor;
          _this.getCtx().fillStyle = shadowColor;

          _this.getCtx().fill();
        });
      }

      this._restore(function () {
        _this._path(function () {
          x = _this.contentX - _this.renderStyles.paddingLeft - borderLeftWidth / 2;
          y = _this.contentY - _this.renderStyles.paddingTop - borderTopWidth / 2;
          w = contentWidth + paddingLeft + paddingRight + (borderLeftWidth + borderRightWidth) / 2;
          h = contentHeight + paddingTop + paddingBottom + (borderTopWidth + borderBottomWidth) / 2;

          if (_this.renderStyles.borderTopWidth) {
            topBorder();
            stroke(_this.renderStyles.borderTopWidth);
          }

          if (_this.renderStyles.borderRightWidth) {
            _this.getCtx().moveTo(x + w - borderRadius, y);

            rightBorder();
            stroke(_this.renderStyles.borderRightWidth);
          }

          if (_this.renderStyles.borderBottomWidth) {
            _this.getCtx().moveTo(x + w, y + h - borderRadius);

            bottomBorder();
            stroke(_this.renderStyles.borderBottomWidth);
          }

          if (_this.renderStyles.borderLeftWidth) {
            _this.getCtx().moveTo(x + borderRadius, y + h);

            leftBorder();
            stroke(_this.renderStyles.borderLeftWidth);
          }
        });
      });
    }
  }, {
    key: "_clip",
    value: function _clip() {
      var _this2 = this;

      if (this.renderStyles.overflow !== 'hidden') return;
      var _this$renderStyles3 = this.renderStyles,
          contentWidth = _this$renderStyles3.contentWidth,
          contentHeight = _this$renderStyles3.contentHeight,
          paddingLeft = _this$renderStyles3.paddingLeft,
          paddingTop = _this$renderStyles3.paddingTop,
          paddingRight = _this$renderStyles3.paddingRight,
          paddingBottom = _this$renderStyles3.paddingBottom,
          shadowBlur = _this$renderStyles3.shadowBlur,
          shadowColor = _this$renderStyles3.shadowColor,
          backgroundColor = _this$renderStyles3.backgroundColor,
          borderLeftWidth = _this$renderStyles3.borderLeftWidth,
          borderRightWidth = _this$renderStyles3.borderRightWidth,
          borderTopWidth = _this$renderStyles3.borderTopWidth,
          borderBottomWidth = _this$renderStyles3.borderBottomWidth;
      var angle = Math.PI / 2;

      var borderRadius = this._getBorderRadius(); // 为了把border也切进去


      var x = this.contentX - this.renderStyles.paddingLeft - borderLeftWidth;
      var y = this.contentY - this.renderStyles.paddingTop - borderTopWidth;
      var w = contentWidth + paddingLeft + paddingRight + borderLeftWidth + borderRightWidth;
      var h = contentHeight + paddingTop + paddingBottom + borderTopWidth + borderBottomWidth;

      var topBorder = function topBorder() {
        // 左上角开始
        _this2.getCtx().moveTo(x, y + borderRadius);

        borderRadius && _this2.getCtx().arc(x + borderRadius, y + borderRadius, borderRadius, 2 * angle, 3 * angle);

        _this2.getCtx().lineTo(x + w - borderRadius, y);
      };

      var rightBorder = function rightBorder() {
        // 右上角
        // this.getCtx().moveTo(x + w - borderRadius, y)
        borderRadius && _this2.getCtx().arc(x + w - borderRadius, y + borderRadius, borderRadius, 3 * angle, 4 * angle);

        _this2.getCtx().lineTo(x + w, y + h - borderRadius);
      };

      var bottomBorder = function bottomBorder() {
        // 右下角
        // this.getCtx().moveTo(x + w, y + h - borderRadius)
        borderRadius && _this2.getCtx().arc(x + w - borderRadius, y + h - borderRadius, borderRadius, 0, angle);

        _this2.getCtx().lineTo(x + borderRadius, y + h);
      };

      var leftBorder = function leftBorder() {
        // 左下角
        borderRadius && _this2.getCtx().arc(x + borderRadius, y + h - borderRadius, borderRadius, angle, angle * 2);

        _this2.getCtx().lineTo(x, y + borderRadius);
      };

      this._path(function () {
        topBorder();
        rightBorder();
        bottomBorder();
        leftBorder();
      });

      this.getCtx().clip();
    }
  }, {
    key: "_getBorderRadius",
    value: function _getBorderRadius() {
      var _this$renderStyles4 = this.renderStyles,
          contentWidth = _this$renderStyles4.contentWidth,
          contentHeight = _this$renderStyles4.contentHeight;
      var borderRadius = this.renderStyles.borderRadius;

      if (borderRadius * 2 > contentWidth) {
        // 如果大于一半，则角不是90度，统一限制最大为一半
        borderRadius = contentWidth / 2;
      }

      if (borderRadius * 2 > contentHeight) {
        borderRadius = contentHeight / 2;
      }

      if (borderRadius < 0) borderRadius = 0;
      return borderRadius;
    }
  }]);

  return View;
}(_element__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);



/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ScrollView; });
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var ScrollView = /*#__PURE__*/function (_View) {
  _inherits(ScrollView, _View);

  var _super = _createSuper(ScrollView);

  function ScrollView(options, children) {
    var _this;

    _classCallCheck(this, ScrollView);

    _this = _super.call(this, options, children); // 外面包裹一层容器，内层的滚动

    options.styles.overflow = 'hidden';
    _this._scrollView = new _view__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](options, [_assertThisInitialized(_this)]);
    return _possibleConstructorReturn(_this, _this._scrollView);
  }

  _createClass(ScrollView, [{
    key: "_getDefaultStyles",
    value: function _getDefaultStyles() {
      return _objectSpread(_objectSpread({}, _constants__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].DEFAULT_STYLES), {}, {
        direction: 'y'
      });
    }
  }, {
    key: "init",
    value: function init() {
      _get(_getPrototypeOf(ScrollView.prototype), "init", this).call(this);

      this.addEventListener();
      var _this$styles = this.styles,
          height = _this$styles.height,
          width = _this$styles.width,
          direction = _this$styles.direction;

      if (direction === 'y') {
        if (!Object(_utils__WEBPACK_IMPORTED_MODULE_1__[/* isAuto */ "a"])(height)) {
          this.styles.height = 'auto';
          this.renderStyles.height = 'auto';
        } else {
          // 必须设置
          console.error('scroll-view 必须设置明确的高度');
        }
      } else if (direction === 'x') {
        if (!Object(_utils__WEBPACK_IMPORTED_MODULE_1__[/* isAuto */ "a"])(width)) {
          this.styles.width = 'auto';
          this.renderStyles.width = 'auto';
        } else {
          // 必须设置
          console.error('scroll-view 必须设置明确的宽度');
        }
      }
    }
  }, {
    key: "addEventListener",
    value: function addEventListener() {
      var _this2 = this;

      // 监听滚动
      this.currentScroll = 0;
      var direction = this.styles.direction;
      var start = 0;
      var lastStart = 0;
      var startMove = false;
      var offset = 0;
      var speed = 0;
      var glideInterval = null;
      var resistance = 1;
      this.getLayer().eventManager.onTouchStart(function (e) {
        e.stopPropagation();
        start = e[direction];
        lastStart = start;
        startMove = true;
        clearInterval(glideInterval);
      }, this);
      this.getLayer().eventManager.onTouchMove(function (e) {
        if (startMove) {
          e.stopPropagation();
          offset = e[direction] - start;

          if (_this2.scrollBy(offset)) {
            lastStart = start;
            start = e[direction];
          }
        }
      }, this);
      this.getLayer().eventManager.onTouchEnd(function (e) {
        if (startMove) {
          startMove = false;
          speed = (e[direction] - lastStart) * 2;
          resistance = -speed * 0.02;
          clearInterval(glideInterval);
          glideInterval = setInterval(function () {
            if (!_this2.scrollBy(speed)) {
              clearInterval(glideInterval);
            }

            speed += resistance;

            if (speed * speed <= 0.05) {
              speed = 0;
              clearInterval(glideInterval);
            }
          }, 18);
        }
      }, this);
    }
  }, {
    key: "_repaint",
    value: function _repaint() {
      // 滚动实现 目前是计算一次重新绘制一次，有需要再优化
      var direction = this.renderStyles.direction;

      if (direction === 'y') {
        this.getCtx().translate(0, this.currentScroll);
      } else {
        this.getCtx().translate(this.currentScroll, 0);
      }

      _get(_getPrototypeOf(ScrollView.prototype), "_repaint", this).call(this);
    }
  }, {
    key: "calcScrollBound",
    value: function calcScrollBound(offset) {
      var _this$_scrollView$ren = this._scrollView.renderStyles,
          offsetWidth = _this$_scrollView$ren.width,
          offsetHeight = _this$_scrollView$ren.height;
      var _this$renderStyles = this.renderStyles,
          scrollWidth = _this$renderStyles.width,
          scrollHeight = _this$renderStyles.height,
          direction = _this$renderStyles.direction;

      if (direction === 'y') {
        if (offsetHeight - this.currentScroll - offset > scrollHeight) {
          return false;
        } else if (this.currentScroll + offset > 0) {
          return false;
        }
      } else {
        if (offsetWidth - this.currentScroll - offset > scrollWidth) {
          return false;
        } else if (this.currentScroll + offset > 0) {
          return false;
        }
      }

      return true;
    }
  }, {
    key: "scrollBy",
    value: function scrollBy(offset) {
      if (this.calcScrollBound(offset)) {
        this.currentScroll += offset;
        this.getLayer().repaint(); // this.getLayer().repaint(this._scrollView)

        return true;
      } else {
        return false;
      }
    }
  }, {
    key: "scrollTo",
    value: function scrollTo(pos) {}
  }]);

  return ScrollView;
}(_view__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);



/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Element; });
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _px__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




/**
 * inline-block block inline flex
 *
 * x
 * y
 * width
 * height
 * position
 *
 *
 */

var Element = /*#__PURE__*/function () {
  function Element(options, children) {
    _classCallCheck(this, Element);

    this.options = options;
    this.children = children;
    this.styles = null;
    this.parent = null;
    this.renderStyles = null;
    this.x = 0;
    this.y = 0;
    this.pre = null;
    this.next = null;
    this.render = null;
    this.root = null;
    this.container = null; // this.init()
  }

  _createClass(Element, [{
    key: "init",
    value: function init() {
      this._initStyles();

      this.initEvent();
    }
  }, {
    key: "initEvent",
    value: function initEvent() {
      if (this.options.on) {
        var click = this.options.on.click;
        this.getLayer().eventManager.onClick(click, this);
      }
    }
  }, {
    key: "getLayer",
    value: function getLayer() {
      return this.root.layer;
    }
  }, {
    key: "mount",
    value: function mount(layer) {
      layer.mountNode(this);
    }
  }, {
    key: "_restore",
    value: function _restore(callback) {
      this.getCtx().save();
      callback();
      this.getCtx().restore();
    }
  }, {
    key: "_path",
    value: function _path(callback) {
      this.getCtx().beginPath();
      callback();
      this.getCtx().closePath();
    }
  }, {
    key: "_initStyles",
    value: function _initStyles() {
      this.styles = Object.assign({}, this._getDefaultStyles(), this._getParentStyles(), this.options.styles || {});

      this._completeStyles();

      this.renderStyles = _objectSpread({}, this.styles);
    }
    /**
     * 需要继承的styles放在这里
     */

  }, {
    key: "_getParentStyles",
    value: function _getParentStyles() {
      var _ref = this.parent && this.parent.styles || {},
          textAlign = _ref.textAlign,
          lineHeight = _ref.lineHeight,
          fontSize = _ref.fontSize,
          color = _ref.color,
          fontFamily = _ref.fontFamily,
          alignItems = _ref.alignItems;

      var extendStyles = {};
      if (textAlign) extendStyles.textAlign = textAlign;
      if (lineHeight) extendStyles.lineHeight = lineHeight;
      if (fontSize) extendStyles.fontSize = fontSize;
      if (color) extendStyles.color = color;
      if (fontFamily) extendStyles.fontFamily = fontFamily;
      if (alignItems === 'flex-start') extendStyles.verticalAlign = 'left';
      if (alignItems === 'center') extendStyles.verticalAlign = 'middle';
      if (alignItems === 'flex-end') extendStyles.verticalAlign = 'bottom';
      return extendStyles;
    }
  }, {
    key: "_completeStyles",
    value: function _completeStyles() {
      this._completeFlex();

      this._completeWidth();

      this._completeBorder();
    }
    /**
     * borderwidth到各个边
     */

  }, {
    key: "_completeBorder",
    value: function _completeBorder() {
      var _this$styles = this.styles,
          borderWidth = _this$styles.borderWidth,
          borderLeftWidth = _this$styles.borderLeftWidth,
          borderRightWidth = _this$styles.borderRightWidth,
          borderBottomWidth = _this$styles.borderBottomWidth,
          borderTopWidth = _this$styles.borderTopWidth,
          borderRadius = _this$styles.borderRadius;

      if (!borderWidth) {
        this.styles.borderWidth = 0;
        borderWidth = 0;
      }

      if (!borderLeftWidth) {
        this.styles.borderLeftWidth = borderWidth;
      }

      if (!borderRightWidth) {
        this.styles.borderRightWidth = borderWidth;
      }

      if (!borderBottomWidth) {
        this.styles.borderBottomWidth = borderWidth;
      }

      if (!borderTopWidth) {
        this.styles.borderTopWidth = borderWidth;
      }

      if (borderRadius) {
        this.styles.overflow = 'hidden';
      }
    }
  }, {
    key: "_completeWidth",
    value: function _completeWidth() {
      if (!this.styles.width && !this.styles.flex) {
        if (this.styles.display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.INLINE_BLOCK || !this.isInFlow()) {
          this.styles.width = _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO;
        } else if (this.styles.display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.BLOCK || this.styles.display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.FLEX) {
          this.styles.width = _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.OUTER;
        } else {}
      }
    }
  }, {
    key: "_completeFlex",
    value: function _completeFlex() {
      if (this.parent && this.parent.styles.display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.FLEX) {
        // flex布局内 width 和flex需要有一个
        if (!this.styles.width && !this.styles.flex) {
          this.styles.flex = 1;
        }
      }
    }
  }, {
    key: "_getDefaultStyles",
    value: function _getDefaultStyles() {
      return _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DEFAULT_STYLES;
    }
    /**
     * 获取入口
     */

  }, {
    key: "tree2List",
    value: function tree2List() {
      this.root = this;

      var list = this._connectChildren();

      return Array.isArray(list) ? list : [list];
    } // 遍历全部的子节点

  }, {
    key: "_connectChildren",
    value: function _connectChildren() {
      var _this = this;

      if (this.hasChildren()) {
        var childrenRender = this._getChildren().map(function (child, index) {
          // 设置parent
          child._setParent(_this); // 设置了上一个兄弟节点


          child._setSibling(_this._getChildren()[index - 1], _this._getChildren()[index + 1]);

          return child._connectChildren();
        }).reduce(function (sum, val) {
          return [].concat(_toConsumableArray(sum), _toConsumableArray(val));
        });

        return [this._generateRender()].concat(_toConsumableArray(childrenRender));
      } else {
        return [this._generateRender()];
      }
    }
  }, {
    key: "hasChildren",
    value: function hasChildren() {
      return Array.isArray(this.children) && this.children.length ? true : false;
    }
  }, {
    key: "_getChildren",
    value: function _getChildren() {
      return this.hasChildren() ? this.children : [];
    } // 获取文档流中的子节点

  }, {
    key: "_getChildrenInFlow",
    value: function _getChildrenInFlow() {
      return this._getChildren().filter(function (item) {
        return item.isInFlow();
      });
    } // 是否在文档流中

  }, {
    key: "isInFlow",
    value: function isInFlow() {
      var _this$styles2 = this.styles,
          position = _this$styles2.position,
          display = _this$styles2.display;
      return position !== _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].POSITION.ABSOLUTE && position !== _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].POSITION.FIXED;
    }
  }, {
    key: "_setParent",
    value: function _setParent(element) {
      this.parent = element;
      this.root = element.root;
    }
  }, {
    key: "_setSibling",
    value: function _setSibling(pre, next) {
      this.pre = pre;
      this.next = next;
    }
  }, {
    key: "_generateRender",
    value: function _generateRender() {
      return this;
    }
  }, {
    key: "getCtx",
    value: function getCtx() {
      return this.root.layer.ctx;
    }
    /**
     * 实现文档流 需要知道上一个兄弟节点
     */

  }, {
    key: "_reflow",
    value: function _reflow() {
      // this._initClearWidthHeight()
      // 初始化尺寸 位置
      // 到这里renderstyles里的尺寸肯定是数字
      this._initStartingPoint();

      this._walkParentLayout(); // 到这里 x ，y 肯定是数字


      this._calcContentLayout();

      this._patchAlign();
    } // paint队列执行

  }, {
    key: "_repaint",
    value: function _repaint() {
      this.getCtx().save();

      this._drawBox();

      this._drawBackground();

      this._drawContent();
    } // 栈

  }, {
    key: "_afterPaint",
    value: function _afterPaint() {
      // 这里通过this.ctx栈实现了overflow
      // 第一步判断没有子元素，绘制完成即restore 有子元素需要子元素全部绘制完毕再restore
      if (!this.hasChildren()) {
        this.getCtx().restore();
      } // 如果到了层级的最后一个 释放父级的stack


      if (this.parent && !this.next && !this.hasChildren()) {
        // 首先释放第一层父级
        this.getCtx().restore();
        var cur = this.parent;

        while (cur && !cur.next) {
          // 如果父级也是同级最后一个，再闭合上一个
          this.getCtx().restore();
          cur = cur.parent;
        }
      }
    }
  }, {
    key: "_drawBox",
    value: function _drawBox() {}
  }, {
    key: "_drawContent",
    value: function _drawContent() {}
  }, {
    key: "_drawBackground",
    value: function _drawBackground() {}
    /**
     * 初始化宽度高度 ,顺序为 父到子，前往后
     * 1、初始化明确的宽度，100% 和数字
     * 2、后面就只剩下auto需要子元素去处理
     * 3、初始化绘制的起点，包括padding margin
     */

  }, {
    key: "_initLayout",
    value: function _initLayout() {
      this._initClearWidthHeight();

      this._calcContentLayout(); // 到这里renderstyles里的尺寸肯定是数字


      this._walkParentLayout();

      this._initStartingPoint(); // 到这里 x ，y 肯定是数字
      // this._initStartingPoint()

    } // 初始化起点

  }, {
    key: "_initStartingPoint",
    value: function _initStartingPoint() {
      // 初始化ctx位置
      if (!this.isInFlow()) {
        // 不在文档流中
        var _this$renderStyles = this.renderStyles,
            top = _this$renderStyles.top,
            bottom = _this$renderStyles.bottom,
            right = _this$renderStyles.right,
            left = _this$renderStyles.left,
            width = _this$renderStyles.width,
            height = _this$renderStyles.height;

        var _this$_getContainerLa = this._getContainerLayout(),
            contentX = _this$_getContainerLa.contentX,
            contentY = _this$_getContainerLa.contentY,
            contentWidth = _this$_getContainerLa.contentWidth,
            contentHeight = _this$_getContainerLa.contentHeight;

        if (top) {
          this.y = contentY + top;
        } else if (bottom) {
          this.y = contentY + contentHeight - bottom - height;
        }

        if (left) {
          this.x = contentX + left;
        } else if (right) {
          this.x = contentX + contentWidth - right - width;
        }
      } else if (this._needNewLine()) {
        // 另起一行
        this.x = this._getContainerLayout().contentX;
        this.y = this._getPreLayout().y + this._getPreLayout().height;
      } else {
        this.x = this._getPreLayout().x + this._getPreLayout().width;
        this.y = this._getPreLayout().y;
      }
    }
    /**
     * 这个方法现在是父级先算，子再算，浪费了资源
     */

  }, {
    key: "_walkParentLayout",
    value: function _walkParentLayout() {
      // 不是最后一个不计算,判断末梢节点
      if (this.next) return;
      var curElement = this; // 循环设置父级尺寸

      while (curElement.parent) {
        // 将父级宽度初始化
        // 这里应该通知父级改，先直接改了吧
        if (curElement.parent.styles.width === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO || curElement.parent.styles.height === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO) {
          curElement.parent._calcLayoutWithChildren();
        } else {
          // 这里应该宽度高度分开循环
          break;
        }

        curElement = curElement.parent;
      }
    } // 将明确设置的初始化，如果是auto，先计算自身宽度，再等子元素计算

  }, {
    key: "_initClearWidthHeight",
    value: function _initClearWidthHeight() {
      var _this$styles3 = this.styles,
          width = _this$styles3.width,
          height = _this$styles3.height,
          display = _this$styles3.display,
          flex = _this$styles3.flex,
          marginLeft = _this$styles3.marginLeft,
          marginRight = _this$styles3.marginRight,
          marginTop = _this$styles3.marginTop,
          marginBottom = _this$styles3.marginBottom;

      var layout = this._measureLayout(); // 初始化宽度高度


      if (Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isOuter */ "c"])(width)) {
        // 不填默认当100%
        this.renderStyles.width = this._getContainerLayout().contentWidth * Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* parseOuter */ "e"])(width);
      } else if (width === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO) {
        //  否则先计算自身
        this.renderStyles.width = layout.width;
      } else if (flex && this.parent && this.parent.renderStyles.display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.FLEX) {
        this.renderStyles.width = this._getFlexWidth();
      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isExact */ "b"])(width)) {
        this.renderStyles.width = width + marginLeft + marginRight;
      }

      if (Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isOuter */ "c"])(height)) {
        // 不填就是auto
        this.renderStyles.height = this._getContainerLayout().contentHeight * Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* parseOuter */ "e"])(height);
      } else if (height === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO) {
        this.renderStyles.height = layout.height;
      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isExact */ "b"])(height)) {
        this.renderStyles.height = height + marginTop + marginBottom;
      } // 处理borderWidth与content重叠,这里实现的是border重叠与margin的内侧


      this.renderStyles.marginTop += this.renderStyles.borderTopWidth;
      this.renderStyles.marginBottom += this.renderStyles.borderBottomWidth;
      this.renderStyles.marginLeft += this.renderStyles.borderLeftWidth;
      this.renderStyles.marginRight += this.renderStyles.borderRightWidth;
    } // 根据子元素计算宽高

  }, {
    key: "_calcLayoutWithChildren",
    value: function _calcLayoutWithChildren() {
      // 到这一步默认没有inline元素，因为inline元素内不允许其他element
      var _this$styles4 = this.styles,
          width = _this$styles4.width,
          height = _this$styles4.height;

      if (width === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO) {
        this.renderStyles.contentWidth = this._calcContentWidthWidthChildren();
      }

      if (height === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO) {
        this.renderStyles.contentHeight = this._calcContentHeightWidthChildren();
      }

      this._calcLayoutWithContent();
    } // 这里是根据width 和height去计算自身的高度
    // 跟上面不同的是，上面的是parent根据子元素计算

  }, {
    key: "_calcLayoutWithContent",
    value: function _calcLayoutWithContent() {
      this.renderStyles.height = this.renderStyles.contentHeight + this.renderStyles.paddingTop + this.renderStyles.paddingBottom + this.renderStyles.marginTop + this.renderStyles.marginBottom;
      this.renderStyles.width = this.renderStyles.contentWidth + this.renderStyles.paddingLeft + this.renderStyles.paddingRight + this.renderStyles.marginLeft + this.renderStyles.marginRight;
    } // 宽高计算完后，初始化content-box宽度

  }, {
    key: "_calcContentLayout",
    value: function _calcContentLayout() {
      var _this$styles5 = this.styles,
          width = _this$styles5.width,
          height = _this$styles5.height;
      var contentLayout = getContentLayout(this); // if (width !== STYLES.WIDTH.AUTO) {

      this.renderStyles.contentWidth = contentLayout.contentWidth; // }
      // if (height !== STYLES.WIDTH.AUTO) {

      this.renderStyles.contentHeight = contentLayout.contentHeight; // }

      this.contentX = contentLayout.contentX;
      this.contentY = contentLayout.contentY; // this._pathTextAlign('right')
    }
    /**
     * 获取一行的宽度，撑开父元素
     */

  }, {
    key: "_calcContentWidthWidthChildren",
    value: function _calcContentWidthWidthChildren() {
      // 需要考虑原本的宽度
      var max = 0;
      var tempMax = max;
      this.children.forEach(function (child) {
        if (child._needNewLine()) {
          // 如果是新起一行，重新计算
          tempMax = 0;
        }

        tempMax += child.renderStyles.width;

        if (tempMax > max) {
          max = tempMax;
        }
      });
      return max;
    }
    /**
     * 计算flex的宽度
     */

  }, {
    key: "_getFlexWidth",
    value: function _getFlexWidth() {
      var containerContentWidth = this._getContainerLayout().contentWidth;

      var clearWidth = 0;
      var totalFlexSum = 0;

      this.parent._getChildrenInFlow().forEach(function (item) {
        if (item.renderStyles.width > 0) {
          clearWidth += item.renderStyles.width;
        } else if (item.renderStyles.flex) {
          totalFlexSum += item.renderStyles.flex;
        }
      });

      return (containerContentWidth - clearWidth) * (this.renderStyles.flex / totalFlexSum);
    }
    /**
     * 计算子元素高度，撑开父元素
     */

  }, {
    key: "_calcContentHeightWidthChildren",
    value: function _calcContentHeightWidthChildren() {
      // todo 没有考虑inline-block
      var complete = true;
      var lineHeight = 0;
      var heightArr = [];
      this.children.forEach(function (child) {
        // 如果还有没计算完成的，这里可以去掉了，全面通过是否有下一个元素判断好了
        if (!_typeof(child.renderStyles.height) === 'number') {
          complete = false;
        } // 如果是第一个元素需要纳入计算


        if (child._needNewLine()) {
          // 从一行到下一个新一行
          heightArr.push(lineHeight);
          lineHeight = child.renderStyles.height;
        } else {
          // 如果是同一行，取最大的
          if (child.renderStyles.height > lineHeight) {
            lineHeight = child.renderStyles.height;
          }
        }

        if (!child.next) {
          // 如果没有下一个了
          heightArr.push(lineHeight);
          lineHeight = 0;
        }
      });
      return complete ? heightArr.reduce(function (sum, val) {
        return sum + (val >= 0 ? val : 0);
      }) : this.renderStyles.height;
    }
    /**
     * 是否需要新起一行
     */

  }, {
    key: "_needNewLine",
    value: function _needNewLine() {
      var display = this.renderStyles.display;

      var _ref2 = this.parent && this.parent.renderStyles || {},
          whiteSpace = _ref2.whiteSpace; // flex容器内


      if (this.parent && this.parent.renderStyles.display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.FLEX && this.pre && this.parent.renderStyles.flexDirection === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].FLEX_DIRECTION.ROW) {
        return false;
      } // block等


      if (display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.BLOCK || display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.FLEX) {
        return true;
      } // 到这里都是inline-block或者inline了


      if (whiteSpace === 'nowrap') return false;

      if (this.pre) {
        var width = this.renderStyles.width;
        if (width === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO) width = 0;
        var _this$pre$renderStyle = this.pre.renderStyles,
            _display = _this$pre$renderStyle.display,
            preWidth = _this$pre$renderStyle.width;

        var _this$_getContainerLa2 = this._getContainerLayout(),
            containerWidth = _this$_getContainerLa2.width,
            containerX = _this$_getContainerLa2.x;

        if (_display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.BLOCK || _display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.FLEX) {
          return true;
        } else if (preWidth + this.pre.x + width > containerX + containerWidth) {
          // 这里将当前宽度等于上一个的宽度了 因为这里宽度还是0，暂时还没有好的解决方案
          // 如果inlineblock顶到右边，换行
          return true;
        }
      } else {
        return true;
      }

      return false;
    }
  }, {
    key: "_getContainerLayout",
    value: function _getContainerLayout() {
      var container = this.parent;

      if (this.styles.position === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].POSITION.STATIC) {}

      if (!container) {
        // root
        container = {
          renderStyles: {
            width: this.container.width,
            height: this.container.height,
            paddingTop: 0,
            paddingBottom: 0,
            paddingLeft: 0,
            paddingRight: 0,
            marginLeft: 0,
            marginRight: 0,
            marginTop: 0,
            marginBottom: 0,
            contentWidth: this.container.width,
            contentHeight: this.container.height
          },
          x: 0,
          y: 0,
          contentX: 0,
          contentY: 0
        };
      }

      return {
        width: container.renderStyles.width,
        height: container.renderStyles.height,
        x: container.x,
        y: container.y,
        paddingTop: container.renderStyles.paddingTop,
        paddingBottom: container.renderStyles.paddingBottom,
        paddingLeft: container.renderStyles.paddingLeft,
        paddingRight: container.renderStyles.paddingRight,
        marginLeft: container.renderStyles.marginLeft,
        marginRight: container.renderStyles.marginRight,
        marginTop: container.renderStyles.marginTop,
        marginBottom: container.renderStyles.marginBottom,
        contentX: container.contentX,
        contentY: container.contentY,
        contentWidth: container.renderStyles.contentWidth,
        contentHeight: container.renderStyles.contentHeight
      };
    } // 这里前一个节点必须在文档流中

  }, {
    key: "_getPreLayout",
    value: function _getPreLayout() {
      var cur = this.pre;

      while (cur && !cur.isInFlow()) {
        cur = cur.pre;
      } // 如果没有前一个或者前面的都不在文档流中，获取容器的


      if (cur) {
        return {
          width: cur.renderStyles.width,
          height: cur.renderStyles.height,
          x: cur.x,
          y: cur.y
        };
      } else {
        return {
          width: 0,
          height: 0,
          x: this._getContainerLayout().contentX,
          y: this._getContainerLayout().contentY
        };
      }
    } // 计算自身的高度

  }, {
    key: "_measureLayout",
    value: function _measureLayout() {
      return {
        width: 0,
        height: 0,
        x: 0,
        y: 0
      };
    }
  }, {
    key: "_px",
    value: function _px(num) {
      // if (num && isExact(num)) {
      //   return num / this.root.container.dpr
      // }
      return num;
    } // 原理 统一从左边往右移动

  }, {
    key: "_patchAlign",
    value: function _patchAlign() {
      var _this2 = this;

      if (!this.parent) return;
      if (!(this.renderStyles.display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.INLINE_BLOCK || this.parent.renderStyles.display === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].DISPLAY.FLEX)) return;
      var textAlign = this.parent.renderStyles.textAlign;
      var verticalAlign = this.renderStyles.verticalAlign;
      var cur;
      var lastXOffset;
      var maxHeight = 0;

      var translateX = function translateX(element) {
        element.x += lastXOffset;
        element.contentX += lastXOffset; // 子元素重新计算 x y位置 待优化

        element._getChildrenInFlow().forEach(function (child) {
          return Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* walk */ "f"])(child, function (el) {
            return el.isInFlow() && el._reflow();
          });
        });
      };

      var translateY = function translateY(element) {
        var offset = 0;

        if (element.renderStyles.verticalAlign === 'middle') {
          offset = (maxHeight - element.renderStyles.height) / 2;
        } else if (element.renderStyles.verticalAlign === 'bottom') {
          offset = maxHeight - element.renderStyles.height;
        }

        element.y += offset;
        element.contentY += offset; // 子元素重新计算 x y位置 待优化

        element._getChildrenInFlow().forEach(function (child) {
          return Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* walk */ "f"])(child, function (el) {
            return el.isInFlow() && el._reflow();
          });
        });
      };

      var refreshXOffset = function refreshXOffset() {
        if (textAlign === 'right') {
          lastXOffset = _this2._getContainerLayout().contentWidth + _this2._getContainerLayout().contentX - cur.x - cur.renderStyles.width;
        } else if (textAlign === 'center') {
          lastXOffset = (_this2._getContainerLayout().contentWidth + _this2._getContainerLayout().contentX - cur.x - cur.renderStyles.width) / 2;
        } else {
          lastXOffset = 0;
        }
      };

      var refreshYOffset = function refreshYOffset() {
        if (cur.renderStyles.height <= maxHeight) return;
        maxHeight = cur.renderStyles.height;
      };

      if ((this._needNewLine() || !this.next) && this.pre) {
        cur = this.pre;

        if (!this.next) {
          // 一行中的最后一个
          cur = this;

          if (this._needNewLine()) {
            refreshXOffset();
            translateX(cur);
            cur = this.pre;
          }
        }

        refreshXOffset(); //  如果是新的一行，计算上一行的对其

        while (cur) {
          refreshYOffset();
          translateX(cur);
          cur = cur.pre;

          if (!cur) {
            break;
          } else if (cur._needNewLine()) {
            refreshYOffset(); // 当前是换行的，再上一个就是上一行了，所以停止遍历

            translateX(cur);
            break;
          }
        } // if (verticalAlign !== 'top') {
        // 取到最大的高度后 对所有的进行对齐
        // TODO: 这里可能还有问题


        cur = this.pre;

        if (!this.next) {
          // 一行中的最后一个
          cur = this;
        }

        while (cur) {
          translateY(cur);
          cur = cur.pre;

          if (!cur) {
            break;
          } else if (cur._needNewLine()) {
            // 当前是换行的，再上一个就是上一行了，所以停止遍历
            translateY(cur);
            break;
          }
        } // }

      } else if (!this.next && !this.pre) {
        cur = this;
        refreshXOffset(); // 只有一个

        translateX(cur);
      }
    }
  }]);

  return Element;
}();



function getContentLayout(element) {
  var width = element.renderStyles.width;
  var height = element.renderStyles.height;
  if (width === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO) width = 0;
  if (height === _constants__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].WIDTH.AUTO) height = 0;
  return {
    contentWidth: width - element.renderStyles.paddingLeft - element.renderStyles.paddingRight - element.renderStyles.marginLeft - element.renderStyles.marginRight,
    contentHeight: height - element.renderStyles.paddingTop - element.renderStyles.paddingBottom - element.renderStyles.marginTop - element.renderStyles.marginBottom,
    contentX: element.x + element.renderStyles.paddingLeft + element.renderStyles.marginLeft,
    contentY: element.y + element.renderStyles.paddingTop + element.renderStyles.marginTop,
    width: width,
    height: height
  };
}

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Text; });
/* harmony import */ var _element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var Text = /*#__PURE__*/function (_Element) {
  _inherits(Text, _Element);

  var _super = _createSuper(Text);

  function Text(options, children) {
    var _this;

    _classCallCheck(this, Text);

    _this = _super.call(this, options, children);
    _this._layout = null; // layout用来保存计算的自身高度

    _this._lines = [];
    _this.children += '';
    return _this;
  }

  _createClass(Text, [{
    key: "_getDefaultStyles",
    value: function _getDefaultStyles() {
      return _objectSpread(_objectSpread({}, _constants__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].DEFAULT_STYLES), {}, {
        display: _constants__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].DISPLAY.INLINE,
        width: _constants__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].WIDTH.AUTO,
        textAlign: 'left'
      });
    }
  }, {
    key: "_completeStyles",
    value: function _completeStyles() {
      _get(_getPrototypeOf(Text.prototype), "_completeStyles", this).call(this);

      this._completeFont();
    }
  }, {
    key: "_completeFont",
    value: function _completeFont() {
      if (this.styles.fontSize && !this.styles.lineHeight) {
        this.styles.lineHeight = this.styles.fontSize * 1.4;
      } else if (!this.styles.lineHeight) {
        this.styles.lineHeight = 14;
      }
    }
  }, {
    key: "_initLayout",
    value: function _initLayout() {
      var _this2 = this;

      this._restore(function () {
        _this2.getCtx().font = _this2._getFont();
        _this2._layout = _this2.getCtx().measureText(_this2.children); // 微信 夸克 有兼容性问题

        _this2._layout.fontHeight = _this2._layout.actualBoundingBoxAscent || _this2.renderStyles.fontSize;
        _this2._layout.height = _this2.renderStyles.lineHeight;

        _this2._calcLine();
      });

      _get(_getPrototypeOf(Text.prototype), "_initLayout", this).call(this);
    }
  }, {
    key: "_measureLayout",
    value: function _measureLayout() {
      return this._layout;
    }
  }, {
    key: "_drawContent",
    value: function _drawContent() {
      var _this3 = this;

      var _this$renderStyles = this.renderStyles,
          color = _this$renderStyles.color,
          contentWidth = _this$renderStyles.contentWidth,
          lineHeight = _this$renderStyles.lineHeight,
          textAlign = _this$renderStyles.textAlign;
      var x = this.contentX;
      this.getCtx().fillStyle = color;
      this.getCtx().textAlign = textAlign;
      this.getCtx().font = this._getFont();

      if (textAlign === _constants__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].TEXT_ALIGN.RIGHT) {
        x = this.contentX + contentWidth;
      } else if (textAlign === _constants__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].TEXT_ALIGN.CENTER) {
        x = this.contentX + contentWidth / 2;
      }

      this._lines.forEach(function (line, index) {
        _this3.getCtx().fillText(line, x, _this3.contentY + _this3._layout.fontHeight + (lineHeight - _this3._layout.fontHeight) / 2 + lineHeight * index);
      });
    }
  }, {
    key: "_getFont",
    value: function _getFont() {
      var _this$renderStyles2 = this.renderStyles,
          fontSize = _this$renderStyles2.fontSize,
          fontWeight = _this$renderStyles2.fontWeight,
          fontFamily = _this$renderStyles2.fontFamily;
      return "".concat(fontWeight, " ").concat(fontSize, "px ").concat(fontFamily);
    }
  }, {
    key: "_calcLine",
    value: function _calcLine() {
      if (!this.parent || !this.children) return;
      var _this$_layout = this._layout,
          textWidth = _this$_layout.width,
          textHeight = _this$_layout.height;
      var parentContentWidth = this.parent.renderStyles.contentWidth;
      var parentWidth = this.parent.styles.width; // 如果一行宽度够，或者父级宽度是auto

      if (Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isExact */ "b"])(parentContentWidth) && parentContentWidth >= textWidth || parentWidth === _constants__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].WIDTH.AUTO) {
        this._lines = [this.children];
      } else {
        this._lines = [];
        var lineIndex = 1;
        var lineText = '';
        var _layout = null;

        for (var i = 0; i < this.children.length; i++) {
          _layout = this.getCtx().measureText(lineText + this.children[i]);

          if (_layout.width > parentContentWidth) {
            if (lineIndex >= this.renderStyles.maxLine) {
              // 最大行数限制 以及maxline省略号实现
              lineText = lineText.substring(0, lineText.length - 2) + '...';
              break;
            } // 超出了


            this._lines.push(lineText);

            lineText = '';
            lineIndex += 1;
          }

          lineText += this.children[i];
        }

        this._lines.push(lineText);
      } // 根据lineheihgt更新height


      this._layout.height = this._lines.length * this.renderStyles.lineHeight;
    }
  }]);

  return Text;
}(_element__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);



/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return $Image; });
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
/* harmony import */ var _weapp_adapter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }






var $Image = /*#__PURE__*/function (_View) {
  _inherits($Image, _View);

  var _super = _createSuper($Image);

  function $Image() {
    _classCallCheck(this, $Image);

    return _super.apply(this, arguments);
  }

  _createClass($Image, [{
    key: "init",
    value: function init() {
      _get(_getPrototypeOf($Image.prototype), "init", this).call(this);

      this._imageInfo = {
        width: 0,
        height: 0,
        contentWidth: 0,
        contentHeight: 0
      };
      this._image = null;

      this._loadImage();
    }
  }, {
    key: "_loadImage",
    value: function _loadImage() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        loadImage(_this.options.attrs.src).then(function (_ref) {
          var info = _ref.info,
              image = _ref.image;
          _this._imageInfo = info;
          _this._image = image;
          resolve();

          _this._layoutImage(); // 重新布局绘制


          _this.getLayer().reflow();

          _this.getLayer().repaint();
        });
      });
    }
  }, {
    key: "_drawContent",
    value: function _drawContent() {
      if (!this._image) return;
      var _this$renderStyles = this.renderStyles,
          contentWidth = _this$renderStyles.contentWidth,
          contentHeight = _this$renderStyles.contentHeight;
      this.getCtx().drawImage(this._image, this.contentX, this.contentY, contentWidth, contentHeight);
    }
  }, {
    key: "_layoutImage",
    value: function _layoutImage() {
      var _this$renderStyles2 = this.renderStyles,
          contentWidth = _this$renderStyles2.contentWidth,
          contentHeight = _this$renderStyles2.contentHeight;
      var _this$styles = this.styles,
          width = _this$styles.width,
          height = _this$styles.height; // 根据用户设置判断图片宽高，目前支持widthfix、heightfix、平铺

      if (!Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isAuto */ "a"])(width) && Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isAuto */ "a"])(height)) {
        width = contentWidth;
        height = getHeightByWidth(width, this._imageInfo.width, this._imageInfo.height);
      } else if (!Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isAuto */ "a"])(height) && Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isAuto */ "a"])(width)) {
        height = contentHeight;
        width = getWidthByHeight(height, this._imageInfo.width, this._imageInfo.height);
      } else if (Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isAuto */ "a"])(width) && Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isAuto */ "a"])(height)) {
        width = this._imageInfo.width;
        height = this._imageInfo.height;
      } else {
        width = contentWidth;
        height = contentHeight;
      }

      this.renderStyles.contentWidth = width;
      this.renderStyles.contentHeight = height;

      this._calcLayoutWithContent();
    }
  }]);

  return $Image;
}(_view__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);



function loadImage(src, ctx) {
  return new Promise(function (resolve, reject) {
    if (Object(_utils__WEBPACK_IMPORTED_MODULE_2__[/* isWX */ "d"])()) {
      Object(_weapp_adapter__WEBPACK_IMPORTED_MODULE_3__[/* getImage */ "a"])(src).then(function (res) {
        return resolve(res);
      })["catch"](function (err) {
        return reject(err);
      });
    } else {
      var image = new Image();
      image.src = src;

      image.onload = function (e) {
        resolve({
          image: image,
          info: {
            width: e.target.width,
            height: e.target.height
          }
        });
      };
    }
  });
}

function getWidthByHeight(height, originWidth, originHeight) {
  return height / originHeight * originWidth;
}

function getHeightByWidth(width, originWidth, originHeight) {
  return width / originWidth * originHeight;
}

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ layer_Layer; });

// CONCATENATED MODULE: ./lib/event-manager.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var EventManager = /*#__PURE__*/function () {
  function EventManager(_ref) {
    var _ref$simulateClick = _ref.simulateClick,
        simulateClick = _ref$simulateClick === void 0 ? true : _ref$simulateClick;

    _classCallCheck(this, EventManager);

    this.clickList = [];
    this.touchstartList = [];
    this.touchmoveList = [];
    this.touchendList = [];
    this.touchStartEvent = null;
    this.simulateClick = simulateClick; // 是否模拟移动端点击事件
  }

  _createClass(EventManager, [{
    key: "clear",
    value: function clear() {
      this.clickList = [];
      this.touchstartList = [];
      this.touchmoveList = [];
      this.touchendList = [];
    }
  }, {
    key: "click",
    value: function click(x, y) {
      var event = new Event({
        x: x,
        y: y,
        type: 'click'
      });

      this._emit(event);
    }
  }, {
    key: "touchstart",
    value: function touchstart(x, y) {
      var event = new Event({
        x: x,
        y: y,
        type: 'touchstart'
      });
      this.touchStartEvent = event;

      this._emit(event);
    }
  }, {
    key: "touchmove",
    value: function touchmove(x, y) {
      var event = new Event({
        x: x,
        y: y,
        type: 'touchmove'
      });

      this._emit(event);
    }
  }, {
    key: "touchend",
    value: function touchend(x, y) {
      var event = new Event({
        x: x,
        y: y,
        type: 'touchend'
      });

      this._emit(event);

      this.checkClick(event);
    }
  }, {
    key: "_emit",
    value: function _emit(e) {
      var callbackList = [];

      switch (e.type) {
        case 'click':
          callbackList = this.clickList;
          break;

        case 'touchstart':
          callbackList = this.touchstartList;
          break;

        case 'touchmove':
          callbackList = this.touchmoveList;
          break;

        case 'touchend':
          callbackList = this.touchendList;
          break;
      }

      for (var i = 0; i < callbackList.length; i++) {
        if (this.isPointInElement(e.x, e.y, callbackList[i].element)) {
          if (!e.currentTarget) e.currentTarget = callbackList[i].element;
          callbackList[i].callback(e);
          if (e.cancelBubble) break;
        }
      }
    }
  }, {
    key: "isPointInElement",
    value: function isPointInElement(x, y, element) {
      var _element$renderStyles = element.renderStyles,
          width = _element$renderStyles.width,
          height = _element$renderStyles.height;

      if (x >= element.x && y >= element.y && x <= element.x + width && y <= element.y + height) {
        return true;
      }

      return false;
    }
  }, {
    key: "createEvent",
    value: function createEvent(x, y, type) {}
  }, {
    key: "onClick",
    value: function onClick(callback, element) {
      // 为啥要unshift呢，因为元素是从父级,往子集初始化的
      this.clickList.unshift({
        callback: callback,
        element: element
      });
    }
  }, {
    key: "onTouchStart",
    value: function onTouchStart(callback, element) {
      this.touchstartList.unshift({
        callback: callback,
        element: element
      });
    }
  }, {
    key: "onTouchMove",
    value: function onTouchMove(callback, element) {
      this.touchmoveList.unshift({
        callback: callback,
        element: element
      });
    }
  }, {
    key: "onTouchEnd",
    value: function onTouchEnd(callback, element) {
      this.touchendList.unshift({
        callback: callback,
        element: element
      });
    } // 这里利用touchstart和touchend实现了移动端click事件

  }, {
    key: "checkClick",
    value: function checkClick(event) {
      if (this.touchStartEvent && this.simulateClick) {
        // 判断两点距离
        var _this$touchStartEvent = this.touchStartEvent,
            startx = _this$touchStartEvent.x,
            starty = _this$touchStartEvent.y;
        var endx = event.x,
            endy = event.y;
        var distance = endy * endy + endx * endx - (starty * starty + startx * startx);

        if (distance < 10 && distance > -10) {
          this.click(endx, endy);
        }
      }
    }
  }]);

  return EventManager;
}();



var Event = /*#__PURE__*/function () {
  function Event(_ref2) {
    var x = _ref2.x,
        y = _ref2.y,
        type = _ref2.type;

    _classCallCheck(this, Event);

    this.x = x;
    this.y = y;
    this.type = type;
    this.cancelBubble = false;
    this.currentTarget = null; // 第一个element
  } // 阻止冒泡


  _createClass(Event, [{
    key: "stopPropagation",
    value: function stopPropagation() {
      this.cancelBubble = true;
    }
  }]);

  return Event;
}();
// EXTERNAL MODULE: ./lib/utils.js
var utils = __webpack_require__(1);

// CONCATENATED MODULE: ./lib/layer.js
function layer_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function layer_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function layer_createClass(Constructor, protoProps, staticProps) { if (protoProps) layer_defineProperties(Constructor.prototype, protoProps); if (staticProps) layer_defineProperties(Constructor, staticProps); return Constructor; }




var layer_Layer = /*#__PURE__*/function () {
  function Layer(ctx, options) {
    layer_classCallCheck(this, Layer);

    this.ctx = ctx;
    this.node = null;
    this.nodeList = [];
    this.renderList = [];
    this.options = options;
    this.eventManager = new EventManager(options);
  }

  layer_createClass(Layer, [{
    key: "mountNode",
    value: function mountNode(node) {
      this.node = node;
      this.node.layer = this;
      this.node.container = this.options; // 事件也清空一下，重新挂载

      this.eventManager.clear();
      this.initRender();
    }
  }, {
    key: "initRender",
    value: function initRender() {
      var nodes = this.nodeList = this.node.tree2List();
      this.initPaintList();
      nodes.forEach(function (item) {
        item.init();
      });

      function flow() {
        nodes.forEach(function (item) {
          item._initLayout();
        });
      }

      flow(); // inline-block等还需要再重新排一次，待优化

      this.reflow();
      this.repaint();
    }
  }, {
    key: "initPaintList",
    value: function initPaintList() {
      // 这里实现index
      this.renderList = this.nodeList;
    }
  }, {
    key: "reflow",
    value: function reflow() {
      this.nodeList.forEach(function (item) {
        item._reflow();
      });
    }
    /**
     * 可以给定element，则只会重绘element所在的区域
     * @param {Element} element
     */

  }, {
    key: "repaint",
    value: function repaint() {
      var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.node;
      // let width = element.renderStyles.width
      // let height = element.renderStyles.height
      // let x = element.x
      // let y = element.y
      // this.ctx.clearRect(x, y, width, height)
      // walk(element, (item) => {
      //   item._repaint()
      //   item._afterPaint()
      // })
      this.ctx.clearRect(this.node.x, this.node.y, this.node.renderStyles.width, this.node.renderStyles.height);
      this.renderList.forEach(function (element) {
        element._repaint();

        element._afterPaint();
      }); // 兼容小程序

      this.ctx.draw && this.ctx.draw();
    }
  }]);

  return Layer;
}();



/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createLayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return registerComponent; });
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var _layer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7);
/* harmony import */ var _scroll_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3);





/**
 * 生成一个element tree
 * @param {String} name
 * @param {Function} options
 */

var elementFactory = {}; //

registerComponent('view', function (options, children) {
  return new _view__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"](options, children);
});
registerComponent('text', function (options, children) {
  return new _text__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"](options, children);
});
registerComponent('image', function (options, children) {
  return new _image__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](options, children);
});
registerComponent('scroll-view', function (options, children) {
  return new _scroll_view__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](options, children);
});
registerComponent('scrollview', function (options, children) {
  return new _scroll_view__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"](options, children);
});
function createElement(model) {
  // 生成树
  function c(name, options) {
    var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var _element = null;

    if (elementFactory[name]) {
      _element = elementFactory[name](options, children);
    } else {
      throw Error("Unknown tag name [".concat(name, "] !"));
    }

    return _element;
  }

  var _model = model(c); // 挂载children


  return _model;
}
function createLayer(ctx, options) {
  return new _layer__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"](ctx, options);
} // 注册全局组件

function registerComponent(name, factory) {
  if (elementFactory[name]) {
    throw Error("Already exist tag name [".concat(name, "] !"));
  }

  elementFactory[name] = factory;
}

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getImage; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);

function getImage(url) {
  return new Promise(function (resolve, reject) {
    wx.downloadFile({
      url: url,
      success: function success(res) {
        wx.getImageInfo({
          src: res.tempFilePath,
          success: function success(res1) {
            resolve({
              info: {
                width: res1.width,
                height: res1.height
              },
              image: res.tempFilePath
            });
          }
        });
      },
      fail: function fail(err) {
        reject(err);
      }
    });
  });
}

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _options = {
  dpr: 2,
  width: 0,
  height: 0
};

function init(options) {
  _options = options;
}
/**
 * 只有在draw的时候需要转换px
 * @param {*} userPx
 */


function px(userPx) {
  return userPx;
}

/* unused harmony default export */ var _unused_webpack_default_export = ({
  init: init,
  px: px
});

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var _create_element__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
/* harmony import */ var _px__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);
/* harmony import */ var _weapp_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var _view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var _text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _image__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _layer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7);
/* harmony import */ var _scroll_view__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);








var ef = {
  createLayer: _create_element__WEBPACK_IMPORTED_MODULE_0__[/* createLayer */ "b"],
  createElement: _create_element__WEBPACK_IMPORTED_MODULE_0__[/* createElement */ "a"],
  component: _create_element__WEBPACK_IMPORTED_MODULE_0__[/* registerComponent */ "c"],
  View: _view__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"],
  Text: _text__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"],
  Image: _image__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"],
  Layer: _layer__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"],
  ScrollView: _scroll_view__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]
};

var _global = window || global;

if (_global) {
  _global.easyFlow = ef;
}

/* harmony default export */ __webpack_exports__["default"] = (ef);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(12)))

/***/ }),
/* 12 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ })
/******/ ]);
});